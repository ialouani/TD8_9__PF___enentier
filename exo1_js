function mP(x) {
    return 3 * Math.pow(x, 2) + 4.7;
}
var mP2 = function (x) { return 3 * Math.pow(x, 2) + 4.7; };
console.log(mP(1.2), mP2(1.2));
console.log("*************");
function dA(f, h) {
    return function (x) {
        return (f(x + h) - f(x - h)) / (2 * h);
    };
}
function dA_n(f, h, n) {
    //n>=1 juste pour l'arret sur f'.
    if (n === 1)
        return dA(f, h);
    else
        return dA_n(dA(f, h), h, n - 1);
}
var f1 = function (x) { return Math.cos(x); };
var f2 = function (x) { return Math.sin(x); };
var dcos = dA(f1, 0.0001);
var dsin = dA(f2, 0.0001);
//cos'(0)===-sin(0)===0.
//sin'(0)===cos(0)===1.
console.log(dcos(0), dsin(0));
console.log("*******************");
//juste reprise des 2 fonctions derivée et n-ieme derivée.(EN APPROX.)
//surtout pour la 2ieme qui cumule des erreurs..
//et les valeurs de test dcos dsin fonctions in 0.()////
//en typage maintenant: pour les 2 fonctions et aussi dcos,dsin tests.
function daT(f, h) {
    return function (x) {
        return (f(x + h) - f(x - h)) / (2 * h);
    };
}
function da_nT(f, h, n) {
    if (n === 1)
        return daT(f, h);
    else
        return da_nT(daT(f, h), h, n - 1);
}
var f1_t = function (x) { return Math.cos(x); };
var f2_t = function (x) { return Math.sin(x); };
var dcos_t = daT(f1_t, 0.0001);
var dsin_t = daT(f2_t, 0.0001);
console.log(dcos_t(0), dsin_t(0));
var dT = function (f, h) { return (function (x) { return ((f(x + h) - f(x - h)) / (2 * h)); }); };
console.log(dT(f1_t, 0.0001)(0));
console.log(dT(f2_t, 0.0001)(0));
var dTn = function (f, h, n) {
    return (n === 1 && dT(f, h)) || dTn(dT(f, h), h, n - 1);
};
console.log("*******");
//curryfied of dA_t.
//l'ancienne version(nn typée)
var dC = function (f) { return function (h) { return (function (x) { return ((f(x + h) - f(x - h)) / (2 * h)); }); }; };
console.log(dC(f1)(0.0001)(0), dC(f2)(0.0001)(0));
var dC_e = function (f) { return function (h) { return function (x) { return ((f(x + h) - f(x - h)) / (2 * h)); }; }; };
var Dcos = dC_e(f1)(0.0001); //derivée du cosinus.
//generalisation de dC_e par anti-specialisation.
//fin rentre dans une fonction donc si 2 au lieu de 3 le retour se forme
//sur la 3ieme place qui est la fonction derivée (x)=>dA(f,h)(x).
var Dsin = dC_e(f2)(0.0001);
console.log(Dcos(0), Dsin(0));
//typage de la forme curryfiée.
console.log("****>>>>>>>>>>>>>>>>>>>:"); //mode1
var dc_t = function (f) { return function (h) { return (function (x) { return (f(x + h) - f(x - h)) / (2 * h); }); }; };
var ff1 = f1_t;
var ff2 = f2_t;
var deriv_cos = dc_t(ff1)(0.0001);
var deriv_sin = dc_t(ff2)(0.0001);
console.log(deriv_cos(0), deriv_sin(0));
//mode2
//specialisation en x.
var t_2 = function (f) { return function (h) { return function (x) { return (f(x + h) - f(x - h)) / (2 * h); }; }; };
console.log(t_2(ff1)(0.0001)(0), t_2(ff2)(0.0001)(0));
var dcos2 = t_2(ff1)(0.0001);
var dsin2 = t_2(ff2)(0.0001);
console.log(dcos2(0), dsin2(0));
console.log("**************************FIN EXO1.///");
//specilisation typée en h et f:
var d_h = function (f) { return dc_t(f)(0.1); };
var d_f = function (h) { return dc_t(Math.cos)(h); };
console.log(d_f(0.0001)(0)); //dcos2(0)
//pour d_h:>>
//prend f et retourne la derivée function
var derivee_sin = d_h(Math.sin);
console.log(derivee_sin(0)); //moins precis car h=0.1 pour specilisation
//via nouvelle fonction d_h.
